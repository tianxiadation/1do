package com.demo.common.model;

import java.util.List;

import com.demo.common.model.base.BaseT1doRelation;
import com.demo.controller.TestController;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class T1doRelation extends BaseT1doRelation<T1doRelation> {
	public static final T1doRelation dao = new T1doRelation().dao();
	/*
	 2019年2月12日 coco 注解：保存关联1do
	*/
	public static void saveRelation(String showId,String relationShowId,Integer SIMILARITY,Integer TYPE) {
		new T1doRelation().setShowId(showId).setRelationShowId(relationShowId).setTYPE(TYPE)
		.setSIMILARITY(SIMILARITY).save();
	}
	/*
	 2019年2月12日 coco 注解：修改关联1do
	 */
	public static void updateRelation(String showId,String relationShowId,Integer SIMILARITY) {
		Db.update("update t_1do_relation set SIMILARITY=? where SHOW_ID=? and RELATION_SHOW_ID=?",SIMILARITY,showId,relationShowId);
		Db.update("update t_1do_relation set SIMILARITY=? where SHOW_ID=? and RELATION_SHOW_ID=?",SIMILARITY,relationShowId,showId);
	}
	/*
	 2019年2月12日 coco 注解：//查询关联1do
	 */
	public static List<Record> selectRelation(String showId,String sql) {
		return Db.find("select  a.ID,a.SIMILARITY,b.SHOW_ID,a.TYPE,b.O_DESCRIBE,unix_timestamp(b.O_CREATE_TIME)*1000 O_CREATE_TIME,unix_timestamp(b.O_FINISH_TIME)*1000 O_FINISH_TIME,b.FBNUM,b.LOOKNUM,"
				+ "(case b.O_STATUS when 3 then '待接单' when 4 then '已接单' when 5 then '已完成' else '已删除' end) O_STATUS"
				+ ",b.O_CUSTOMER_NAME,b.O_EXECUTOR_NAME from t_1do_relation a,t_1do_base b "
				+ "where (a.SIMILARITY>10 or a.TYPE=0) and a.RELATION_SHOW_ID=b.SHOW_ID and a.SHOW_ID=? "+sql+" ORDER BY a.SORT,a.SIMILARITY desc",showId);
	}
	/*
	 2019年2月14日 coco 注解：修改相似度
	*/
	public static void updateSimilarity(String SHOW_ID,String sql,Integer type) {
		 if(type==1){
			 
			 List<T1doLabel> list=T1doLabel.dao.find("select * from t_1do_label where SHOW_ID=?",SHOW_ID);
			 List<T1doRelation> base1=dao.find("select * from t_1do_relation where SHOW_ID=? "+sql,SHOW_ID);
			 base1.forEach(t1->{
				 List<T1doLabel> list1=T1doLabel.dao.find("select * from t_1do_label where SHOW_ID=? ",t1.getRelationShowId());
				 int result=TestController.getHashSet(list, list1);
				 int i=list.size()>list1.size()?list.size():list1.size();
				 int a=(int) ((double)(list.size()+list1.size()-result)/i*100);
				 T1doRelation.updateRelation(SHOW_ID, t1.getRelationShowId(), a);				
			 });
		 }else{
					List<T1doLabel> list=T1doLabel.dao.find("select * from t_1do_label where SHOW_ID=?",SHOW_ID);
					List<T1doBase> base1=T1doBase.dao.find("select * from t_1do_base where SHOW_ID!=? ",SHOW_ID);
					base1.forEach(t1->{
						List<T1doLabel> list1=T1doLabel.dao.find("select * from t_1do_label where SHOW_ID=?",t1.getShowId());
						int result=TestController.getHashSet(list, list1);
						int i=list.size()>list1.size()?list.size():list1.size();
						int a=(int) ((double)(list.size()+list1.size()-result)/i*100);
						T1doRelation.saveRelation(SHOW_ID, t1.getShowId(), a,t1.getOStatus());
						T1doRelation.saveRelation(t1.getShowId(), SHOW_ID, a,3);
						
					});
		 }
	}
}
