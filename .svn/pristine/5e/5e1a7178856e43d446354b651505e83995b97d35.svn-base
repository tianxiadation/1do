package com.demo.common.model;

import java.util.Date;
import java.util.List;

import com.alibaba.fastjson.JSONObject;
import com.demo.common.model.base.BaseT1doProject;
import com.demo.util.StrUtil;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.SqlPara;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class T1doProject extends BaseT1doProject<T1doProject> {
	public static final T1doProject dao = new T1doProject().dao();

	/**
	 * 根据id获取
	 * @param id
	 * @return
	 */
	public static T1doProject getT1doProjectById(long id) {
		String sql = "SELECT * FROM t_1do_project WHERE ITEM_ID = ?";
		return dao.findFirst(sql, id);
	}
	/**
	 * 根据id获取
	 * @param id
	 * @return
	 */
	public static boolean isKeyT1doProjectById(long id) {
		String sql = "SELECT * FROM t_1do_project WHERE ITEM_ID = ? and is_key=1";
		return dao.findFirst(sql, id)!=null;
	}


	/**
	 * 获取重点项目(id加100000000防止重复)
	 * @return
	 */
	public static List<Record> getKeyProjects() {
		String sql = "SELECT b.ID+100000000 id,b.ITEM_NAME topic,p.IS_FINISH isFinish,b.TYPE type, p.O_FINISH_TIME finishTime FROM t_1do_project p, t_1do_board b WHERE p.ITEM_ID = b.ID AND p.IS_KEY = 1";
		return Db.find(sql);
	}

	/**
	 * 设置为重点项目
	 *
	 * @param id
	 */
	public static void setKeyProject(long id, int isKey) {
		String sql = "UPDATE t_1do_project SET IS_KEY = ? WHERE ITEM_ID = ?";
		Db.update(sql, isKey, id);
	}


	/**
	 * 设置为办结
	 * @param id
	 */
	public static void setFinish(long id) {
		String sql = "UPDATE t_1do_project SET IS_FINISH = 1 WHERE ITEM_ID = ?";
		Db.update(sql,id);
	}

	/**
	 * 获取项目信息
	 * @param id
	 * @return
	 */
	public static Record getProject(long id) {
		String sql = "SELECT b.ID id, b.ITEM_NAME name,b.PARENT_ID parentId, p.O_CREATE_TIME createTime, p.O_FINISH_TIME finishTime FROM t_1do_board b, t_1do_project p WHERE b.ID = p.ITEM_ID AND b.ID = ?";
		return Db.findFirst(sql, id);
	}
	/**
	 * 获取项目列表
	 * @param userName
	 * @return
	 */
	public static Page<Record> getProjectList(JSONObject json,String userName,int i) {
		// TODO Auto-generated method stub	
		//Knowledgeinfo.dao.paginate(pageNumber,num,sqlPara);
		SqlPara sqlPara = new SqlPara();
		String str="select a.ITEM_ID,a.O_CREATE_TIME,a.NAME,b.U_TRUE_NAME,a.UPDATE_TIME,a.IS_DELETED from t_1do_project a" +
				" LEFT JOIN`t_1do_project_stakeholder` c on a.`ITEM_ID`=c.`ITEM_ID` LEFT JOIN t_reg_user b ON" +
				" a.`CRATE_USER`=b.`SHOW_ID` where a.IS_DELETED="+json.getIntValue("isDeleted");
		//整理层和领导能看全部，其余人只能看到自己的和自己为祝节点干系人的
		if(i!=1 && i!=2){
			str += " and (a.CRATE_USER='"+userName+"' or c.`O_USER`='"+userName+"')";
		}
		if(StrUtil.isNotEmpty(json.getString("name"))) {
			str += " and a.NAME like '%" + json.getString("name") + "%'";
		}
		str+=" GROUP BY a.`ITEM_ID` order by a.UPDATE_TIME desc";
		sqlPara.setSql(str);
		return Db.paginate(json.getIntValue("pageNumber"),json.getIntValue("pageSize"),sqlPara);
	}
	
	/**
	 * 获取所有项目
	 * @return
	 */
	public static List<T1doProject> getAllProject() {
		// TODO Auto-generated method stub
		return dao.find("select a.*  from t_1do_project a,t_1do_board b where a.ITEM_ID=b.id and (b.`COMPLETION`!='已完成' or b.FINISH_DATE=left(now(),10))");
	}
	/**
	 * 获取所有当天日报存在的项目
	 * @return
	 */
	public static List<T1doProject> getAllProjectByDailyReportExists(String date) {
		// TODO Auto-generated method stub
		return dao.find("select a.*  from t_1do_project a,t_1do_board_daliy_report b where a.ITEM_ID=b.PROJECT_ID AND b.DATE=? GROUP BY a.ITEM_ID",date);
	}
	/**
	 * 获取所有未关联的项目
	 * @return
	 */
	public static List<T1doProject> getAllUnrelatedProjects() {
		// TODO Auto-generated method stub
		return dao.find("SELECT b.`ID`,b.`ITEM_NAME` FROM `t_1do_project` p, `t_1do_board` b WHERE p.`ITEM_ID`=b.`ID` and p.`IS_DELETED` = 0 and b.`PARENT_ID` = 1");
	}

	/**
	 * 获取所有未删除的项目
	 * @return
	 */
	public static List<T1doProject> getAllProjects() {
		// TODO Auto-generated method stub
		return dao.find("SELECT `ITEM_ID` ID,`NAME` ITEM_NAME FROM `t_1do_project` WHERE `IS_DELETED` = 0");
	}

	/**
	 * 获取所有未删除并未完成的项目
	 * @return
	 */
	public static List<T1doProject> getNotCompleteProjects() {
		// TODO Auto-generated method stub
		return dao.find("SELECT p.`ITEM_ID` FROM `t_1do_project` p, `t_1do_board` b WHERE p.`ITEM_ID`=b.`ID` and p.`IS_DELETED` = 0 and b.`COMPLETION`<>'已完成'");
	}



	/**
	 * 修改更新时间
	 * @param updateTime
	 * @param projectId
	 */
	public static void updateUpdateTime(Date updateTime, long projectId) {
		String sql = "UPDATE `t_1do_project` set `UPDATE_TIME` = ? WHERE `ITEM_ID` = ?";
		Db.update(sql, updateTime, projectId);
	}
	public static int deleteOrReplyToProject(long longValue) {
		return Db.update("update t_1do_project set IS_DELETED=(IS_DELETED-1)*-1 WHERE ITEM_ID=?",longValue);
	}


}
