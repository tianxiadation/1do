package com.demo.common.model;

import com.demo.common.model.base.BaseT1doBoard;
import com.demo.model.ProjectModel;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import kafka.utils.json.JsonObject;

import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class T1doBoard extends BaseT1doBoard<T1doBoard> {
	public static final T1doBoard dao = new T1doBoard().dao();
    public static String str="select * from (select * from t_1do_board t ORDER BY  parent_id) a  \n" + 
    		"													 union all  \n" + 
    		"									select * from  (select * from t_1do_board tt ORDER BY  id) b   \n" + 
    		"									 union all  \n" + 
    		"							select * from  (select * from t_1do_board tt ORDER BY parent_id,id) c\n" + 
    		"						union all  \n" + 
    		"							select * from  (select * from t_1do_board tt ORDER BY id,parent_id) d	";
	/**
	 * 插入节点
	 * @param item
	 */
	public static void insertItem(T1doBoard item) {
		item.save();
	}

	/**
	 * 根据类型查询所有节点,不包括项目
	 * @param type 1-项目分类 2-项目子节点分类
	 * @return
	 */
	public static List<T1doBoard> getAllItem(int type) {
		String sql = "SELECT * FROM t_1do_board WHERE TYPE != 2";
		return dao.find(sql);
	}
	
	/**
	 * 根据id查询是否是办结项目
	 * @param 
	 * @return
	 */
	public static boolean getIsFinish(Long long1) {
		String sql = "SELECT * FROM t_1do_project where IS_FINISH=true and ITEM_ID=?";
		return dao.findFirst(sql,long1)!=null;
	}
	/**
	 * 根据类型查询所有节点,不包括项目
	 * @param type 1-项目分类 2-项目子节点分类
	 * @return
	 */
	public static List<T1doBoard> getAllItem1(int type) {
		String sql = "SELECT * FROM t_1do_board WHERE TYPE = ?";
		return dao.find(sql,type);
	}

	/**
	 * 查询所有节点（与前端配合）
	 * @param type 1-项目分类 2-项目子节点分类
	 * @return
	 */
	public static List<Record> getAllItems(int type) {
		//String sql = "SELECT ID id,ITEM_NAME topic,PARENT_ID parentid,p.IS_FINISH isFinish,b.TYPE type, p.O_FINISH_TIME finishTime,p.IS_KEY isKey FROM t_1do_board b LEFT JOIN t_1do_project p ON b.ID = p.ITEM_ID WHERE TYPE = ? or TYPE = 3";
		String sql = "SELECT ID id,ITEM_NAME topic,PARENT_ID parentid,b.TYPE type,case when b.`COMPLETION`='已完成' then 1 else 0 end isComplete FROM t_1do_board b WHERE TYPE = ? or (TYPE = 3 and PARENT_ID <> 1)";
		return Db.find(sql, type);
	}



	/**
	 * 根据id查询
	 * @param id
	 * @return
	 */
	public static T1doBoard getItemById(Long id) {
		String sql = "SELECT * FROM t_1do_board WHERE ID = ?";
		return dao.findFirst(sql, id);
	}

	/**
	 * 查询是否含有子节点
	 * @param id
	 * @return
	 */
	public static List<T1doBoard> getHasChildren(long id) {
		String sql = "SELECT * FROM t_1do_board WHERE PARENT_ID = ?";
		return dao.find(sql, id);
	}
	/**
	 * 根据根据子节点查询父节点到项目为止
	 * @param
	 * @return
	 */
	public static List<T1doBoard> getItems(long id) {
		String sql = "SELECT T2.* " +
				"FROM ( " +
				"    SELECT " +
				"        @r AS _id, " +
				"        (SELECT @r := parent_id FROM t_1do_board WHERE id = _id) AS parent_id, " +
				"        @l := @l + 1 AS lvl " +
				"    FROM " +
				"        (SELECT @r := ?, @l := 0) vars, " +
				"        t_1do_board h " +
				"    WHERE @r <> 0) T1 " +
				"JOIN t_1do_board T2 " +
				"ON T1._id = T2.id and T2.TYPE>1 " +
				"ORDER BY T1.lvl DESC " ;

		return dao.find(sql, id);
	}


	/**
	 * 根据子节点查询所有父节点
	 * @param id
	 * @param type 1-项目分类，2-项目子分类
	 * @return
	 */
	public static List<Record> getAllParents(long id, int type) {
		String sql = "SELECT " +
				" T2.ID id,T2.ITEM_NAME topic,T2.PARENT_ID parentid,T2.TYPE type " +
				"FROM " +
				"(" +
				"SELECT " +
				"@r AS _id, " +
				"( SELECT @r := parent_id FROM t_1do_board WHERE id = _id ) AS parent_id, " +
				"@l := @l + 1 AS lvl " +
				"FROM " +
				"( SELECT @r := ?, @l := 0 ) vars," +
				" t_1do_board h " +
				"WHERE " +
				"@r <> 0 " +
				") T1 " +
				"JOIN t_1do_board T2 ON T1._id = T2.id and (T2.TYPE = ? OR T2.TYPE = 3) " +
				"ORDER BY " +
				"T1.lvl DESC";
		return Db.find(sql, id, type);
	}
	/**
	 * 根据父节点查询所有子节点(项目为最大父节点)
	 * @return
	 */
	public static List<T1doBoard> getAll() {
		String sql = "		SELECT *  FROM (\n" + 
				"		SELECT t1.*,\n" + 
				"		IF(FIND_IN_SET(parent_id, @pids) > 0, @pids := CONCAT(@pids, ',', id), '0') AS ischild\n" + 
				"		FROM (\n" + str+"		) t1,\n" + 
				"		(SELECT @pids := 1) t2\n" + 
				"		) t3 WHERE (ischild != '0' or id=1) and type>1 GROUP BY id";
		return dao.find(sql);
	}

	/**
	 * 根据父节点查询所有子节点(不包括父节点)
	 * @return
	 */
	public static List<T1doBoard> getChildren(long id) {
		String sql = "SELECT\n" +
				"\ta.* \n" +
				"FROM\n" +
				"\t(\n" +
				"SELECT\n" +
				"\tt1.id,\n" +
				"IF\n" +
				"\t( find_in_set( parent_id, @pids ) > 0, @pids := concat( @pids, ',', id ), 0 ) AS ischild \n" +
				"FROM\n" +
				"\t( "+str+" ) t1,\n" +
				"\t( SELECT @pids := ?) t2 \n" +
				"\t) t3\n" +
				"\tJOIN t_1do_board a ON t3.id = a.id \n" +
				"WHERE\n" +
				"\tischild != 0 GROUP BY a.id";
		return dao.find(sql, id);
	}

	/**
	 * 节点所属项目  
	 * @param id
	 * @return
	 */
	public static T1doBoard getMaxItemById(Long id) {
		String sql = " SELECT T2.* \n" + 
				"				FROM ( \n" + 
				"				    SELECT \n" + 
				"				        @r AS _id, \n" + 
				"				        (SELECT @r := parent_id FROM t_1do_board WHERE id = _id) AS parent_id, \n" + 
				"				       @l := @l + 1 AS lvl \n" + 
				"				    FROM \n" + 
				"				        (SELECT @r := ?, @l := 0) vars, \n" + 
				"				        t_1do_board h \n" + 
				"				    WHERE @r <> 0) T1 \n" + 
				"				JOIN t_1do_board T2 \n" + 
				"				ON T1._id = T2.id and T2.TYPE=3  \n" + 
				"				ORDER BY T1.lvl DESC ";
		return dao.findFirst(sql,id);
	}

	/**
	 * 查询项目子节点
	 * @param id
	 * @param hide 
	 * @return
	 */
	public static List<Record> getProjectChildren(long id, Integer hide) {
		String str1="";
		if(hide==1) {
			str1 = "and a.COMPLETION!='已完成' ";
		}
		String sql = "\tselect a.ID id,a.ITEM_NAME topic,a.PARENT_ID parentid,a.TYPE type,a.COMPLETION from (\n" +
				"              select t1.id,\n" +
				"              if(find_in_set(parent_id, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n" +
				"              from (" +str+" ) t1,\n" +
				"                  (select @pids := ? ) t2\n" +
				"             ) t3 JOIN t_1do_board a ON t3.id = a.id "+str1+"  where ischild != 0 GROUP BY a.id";
		return Db.find(sql, id);
	}

	/**
	 * 获取项目
	 * @param id
	 * @return
	 */
	public static Record getProjectById(long id) {
		String sql = "SELECT ID id,ITEM_NAME topic,TYPE type,p.`IS_KEY` isKey,b.`COMPLETION` FROM t_1do_board b, `t_1do_project` p WHERE b.id = p.`ITEM_ID` and b.ID = ?";
		return Db.findFirst(sql, id);
	}

	/**
	 * 获取所有的项目
	 * @return
	 */
	public static List<T1doBoard> getAllProjects() {
		String sql = "SELECT * FROM `t_1do_board` WHERE `type`=3";
		return dao.find(sql);
	}
	/**
	 * 获取所有的项目
	 * @return
	 */
	public static List<T1doBoard> getAllProjects1() {
		String sql = "SELECT ID,ITEM_NAME FROM `t_1do_board` WHERE `type`=3";
		return dao.find(sql);
	}

	/**
	 * 根据群id获取项目
	 * @param groupId
	 * @return
	 */
	public static T1doBoard getProjectByGroupId(String groupId) {
		String sql = "SELECT b.`ID`, b.`ITEM_NAME` FROM `t_1do_project` p, `t_1do_board` b WHERE p.`ITEM_ID`=b.`ID` and `GROUP_ID` = ?";
		return dao.findFirst(sql, groupId);
	}

	/**
	 * 修改节点
	 * @param t1doBoard
	 */
	public static void update(T1doBoard t1doBoard) {
		String sql = "UPDATE `t_1do_board` SET `ITEM_NAME`=? , `PARENT_ID`=? WHERE `ID`=?";
		Db.update(sql, t1doBoard.getItemName(), t1doBoard.getParentId(), t1doBoard.getID());
	}
}
