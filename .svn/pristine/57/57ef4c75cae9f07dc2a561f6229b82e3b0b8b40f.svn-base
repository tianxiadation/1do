package com.demo.common.model;

import java.util.HashSet;
import java.util.List;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.demo.common.model.base.BaseT1doProjectStakeholder;
import com.demo.model.ResPersonModel;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class T1doProjectStakeholder extends BaseT1doProjectStakeholder<T1doProjectStakeholder> {
	public static final T1doProjectStakeholder dao = new T1doProjectStakeholder().dao();

	public static int getFlag(String O_USER,String SHOW_ID,Integer POWER) {
		if(POWER<3) {
			return POWER;
		}else {
			T1doProject1do t=T1doProject1do.getT1doProject1do(SHOW_ID);
			if(t==null) {
				return 3;
			}else {
				T1doBoard t1=T1doBoard.getMaxItemById(t.getItemId());//节点所属项目  
				if(t1==null) {
					return 3;
				}else if(dao.findFirst("select * from t_1do_project_stakeholder  where O_USER=? and ITEM_ID=?",O_USER,t1.getID())!=null) {
					return 4;
				}else {
					return 3;
				}
			}
		}
		
	}

	/**
	 * 根据项目id和人员showId判断干系人是否存在
	 * @return
	 */
	public static T1doProjectStakeholder isExist(Long projectId, String showId) {
		String sql = "SELECT * FROM t_1do_project_stakeholder WHERE ITEM_ID = ? AND O_USER = ?";
		return dao.findFirst(sql, projectId, showId);
	}

	/**
	 * 根据项目id删除
	 * @param projectId
	 */
	public static void deleteByProjectId(Long projectId) {
		String sql = "DELETE FROM t_1do_project_stakeholder WHERE ITEM_ID = ?";
		Db.update(sql, projectId);
	}

	/**
	 * 批量插入
	 * @param people
	 */
	public static void batchSave(List<ResPersonModel> people,long projectId) {
		for (ResPersonModel person : people) {
			if (StrKit.notBlank(person.getShowId())) {
				T1doProjectStakeholder stakeholder = new T1doProjectStakeholder();
				stakeholder.setItemId(projectId);
				stakeholder.setOUser(person.getShowId());
				stakeholder.save();
			}
		}
	}

	/**
	 * 根据干系人获取项目
	 * @param showId
	 * @return
	 */
	public static List<T1doProjectStakeholder> getProjectsByUser(String showId) {
		String sql = "SELECT * FROM t_1do_project_stakeholder WHERE O_USER = ?";
		return dao.find(sql, showId);
	}

	/**
	 * 获取项目干系人
	 * @param id
	 * @return
	 */
	public static List<Record> getUserByProjectId(long id) {
		String sql = "SELECT u.SHOW_ID showId, u.U_TRUE_NAME trueName FROM t_1do_project_stakeholder s,t_reg_user u WHERE s.O_USER = u.SHOW_ID AND s.ITEM_ID = ?";
		return Db.find(sql, id);
	}
	/**
	 * 节点添加干系人
	 * @return
	 */
	public static void insertStakeholder(JSONObject json) {
		Db.delete("delete from t_1do_project_stakeholder where ITEM_ID=?",json.getInteger("ITEM_ID"));
		JSONArray arr=json.getJSONArray("SHOW_ID");
		for (int i = 0; i < arr.size(); i++) {
			String companyShowId = getCompanyByUser(arr.getString(i));
			Db.update("INSERT INTO t_1do_project_stakeholder(ITEM_ID,O_USER,COMPANY,PROJECT_ID) VALUES(?,?,?,?)",json.getInteger("ITEM_ID"),arr.get(i),companyShowId,json.getInteger("PROJECT_ID"));
		}
		
	}


	public static String[] getPRINCIPLE(Long id) {
		List<TRegCompanyDept> t1=TRegCompanyDept.dao.find("select e.* from t_1do_project_stakeholder p,(select * from(select a.SHOW_ID,a.U_TRUE_NAME,c.D_NAME,c.D_PATH_NAME,c.D_PATH from t_reg_user a,t_reg_user_dept b ,t_reg_company_dept c where a.SHOW_ID=b.U_NAME and b.U_DEPT_ID=c.SHOW_ID and c.D_PATH_NAME LIKE '%合作公司%'\n" + 
				"UNION all\n" + 
				"select a.SHOW_ID,a.U_TRUE_NAME,c.D_NAME,c.D_PATH_NAME,c.D_PATH from t_reg_user a,t_reg_user_dept b ,t_reg_company_dept c where a.SHOW_ID=b.U_NAME and b.U_DEPT_ID=c.SHOW_ID )d GROUP BY SHOW_ID)e\n" + 
				"where p.O_USER=e.SHOW_ID and p.ITEM_ID=? GROUP BY D_PATH_NAME",id);
		HashSet<String> hset=new HashSet<String>();
		HashSet<String> hset1=new HashSet<String>();
	    for (TRegCompanyDept t : t1) {
			if(t.getDPathName().contains("合作公司")) {
				hset.add(t.getDPath().split("●")[2]);
				hset1.add(t.getDPathName().split("●")[2]);
			}else {
				hset.add(t.getDPath().split("●")[t.getDPath().split("●").length-1]);
				hset1.add(t.getDPathName().split("●")[t.getDPathName().split("●").length-1]);
			}
		}
	    String[] str=new String[2];
	    if(t1.size()==0) {

	    	return str;
	    }
	    String str1="";
	    String str2="";
	    	for (String s1 : hset) {
	    		str1+=s1+",";
			}
	    	str[0]=str1.substring(0, str1.length()-1);
	    	for (String s2 : hset1) {
	    		str2+=s2+",";
			}
	    	str[1]=str2.substring(0, str2.length()-1);
	    	return str;
		
	}


	/**
	 * 获取项目负责人的公司
	 * @return
	 */
	public static List<Record> getCompanies() {
		String sql = "SELECT c.`SHOW_ID` companyShowId,c.`D_PATH` FROM `t_1do_project_stakeholder` s , `t_reg_user` u, `t_reg_company_dept` c,`t_reg_user_dept` d WHERE s.`O_USER` = u.`SHOW_ID` and s.`O_USER` = d.`U_NAME` and c.`SHOW_ID` = d.`U_DEPT_ID` GROUP BY c.`SHOW_ID`";
		return Db.find(sql);
	}

	/**
	 * 获取公司下的所有人的账号
	 * @param companyShowId
	 * @return
	 */
	public static Record getCompanyAccounts(String companyShowId) {
		String sql = "SELECT GROUP_CONCAT(\"'\",u.`U_LOGIN_NAME`,\"'\") account FROM `t_reg_user` u, `t_reg_company_dept` c,`t_reg_user_dept` d WHERE  u.`SHOW_ID` = d.`U_NAME` and c.`SHOW_ID` = d.`U_DEPT_ID` and c.`SHOW_ID` = ?";
		return Db.findFirst(sql,companyShowId);
	}


	/**
	 * 根据用户ShowId获取公司showId
	 * @param account
	 * @return
	 */
	public static String getCompanyByUser(String account) {
		TRegCompanyDept companyDept = TRegCompanyDept.getInstanceByUser(account);
		String companyShowId = "";
		//若有合作公司一级，取合作公司下一级，合作公司showId=l6znLJpQXPTnE3B5
		if (companyDept != null) {
			companyShowId = companyDept.getShowId();
			String dept = companyDept.getDPath();
			String depts[] = dept.split("●");
			for (int j = 0; j < depts.length; j++) {
				if (depts[j].equals("l6znLJpQXPTnE3B5")) {
					companyShowId = depts[j + 1];
					break;
				}
			}
		}
		return companyShowId;
	}

	/**
	 * 获取项目所有的公司
	 * @param projectId 项目id
	 * @return
	 */
	public static List<Record> getProjectCompanies(long projectId) {
		String sql = "SELECT c.SHOW_ID, s.COMPANY company FROM t_1do_project_stakeholder s,t_reg_company_dept c WHERE " +
				"(s.COMPANY = c.SHOW_ID OR s.COMPANY = c.D_PARENTID_SHOW_ID) AND PROJECT_ID = ? GROUP BY c.SHOW_ID";
		return Db.find(sql,projectId);
	}

}
